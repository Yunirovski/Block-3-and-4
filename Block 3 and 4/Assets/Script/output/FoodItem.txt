// Assets/Scripts/Items/FoodItem.cs
using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// 单一食物 ScriptableObject：使用时在玩家前方生成预制体并扣库存。<br/>
/// 同时保留旧字段 <c>foodTypes</c>/<c>foodPrefabs</c>/<c>currentIndex</c>
/// 以兼容 InventorySystem 旧代码（永远只有 1 个元素）。
/// </summary>
[CreateAssetMenu(menuName = "Items/FoodItem")]
public class FoodItem : BaseItem
{
    /* ===================================================================== */
    /*                        ―― 现行配置（精简版） ――                        */
    /* ===================================================================== */

    [Header("Prefab & Spawn")]
    [Tooltip("要生成的食物预制体")]
    public GameObject foodPrefab;          // 现在只需要 1 个预制体

    [Tooltip("在相机前方生成的距离（米）")]
    public float spawnDistance = 2f;

    /* ===================================================================== */
    /*                       ―― 兼容旧代码的“桥接” ――                         */
    /* ===================================================================== */

    // ―― 旧字段：可在 Inspector 中折叠隐藏，避免误操作 ――
    [HideInInspector] public List<FoodType> foodTypes = new() { FoodType.Food };
    [HideInInspector] public List<GameObject> foodPrefabs = new();           // Awake 时自动填充
    [HideInInspector] public int currentIndex = 0;                            // 永远 = 0

    // 由于 ScriptableObject 的 Awake 并不总是被调用，再加 OnEnable 做保险
    private void Awake() => EnsureCompatLists();
    private void OnEnable() => EnsureCompatLists();

    // 确保兼容列表里至少有一个元素
    private void EnsureCompatLists()
    {
        if (foodTypes.Count == 0) foodTypes.Add(FoodType.Food);

        if (foodPrefabs.Count == 0 && foodPrefab != null)
            foodPrefabs.Add(foodPrefab);
    }

    /* ===================================================================== */
    /*                          ―― BaseItem 接口 ――                           */
    /* ===================================================================== */

    public override void OnSelect(GameObject model)
    {
        // 仅在 HUD 上显示唯一类型
        UIManager.Instance.UpdateFoodTypeText(FoodType.Food);
    }

    public override void OnUse()
    {
        // 扣库存
        if (!ConsumableManager.Instance.UseFood())
        {
            UIManager.Instance.UpdateCameraDebugText("没有食物剩余！");
            return;
        }

        // 生成食物
        Camera cam = Camera.main;
        if (cam == null)
        {
            Debug.LogError("FoodItem.OnUse: Main Camera not found.");
            return;
        }

        Vector3 spawnPos = cam.transform.position + cam.transform.forward * spawnDistance;
        Instantiate(foodPrefab, spawnPos, Quaternion.identity);

        UIManager.Instance.UpdateCameraDebugText($"已在前方 {spawnDistance}m 处生成食物");
    }

    // 以前用来 [ / ] 切换，现在不再需要
    public override void HandleUpdate() { }
}
