using UnityEngine;

/// <summary>
/// 动物对食物的简单状态机：
/// Idle → Approaching → Eating → Grace
/// </summary>
public class AnimalFoodResponse : MonoBehaviour
{
    [Header("Food Interaction Settings")]
    [Tooltip("动物性格决定靠近/回避玩家的方式")]
    public Temperament temperament = Temperament.Neutral;

    [Tooltip("动物可以侦测食物的半径")]
    public float detectionRadius = 20f;

    [Tooltip("Fearful/Hostile 判定玩家距离的阈值")]
    public float safeDistance = 15f;

    [Tooltip("吃食物的持续时间（秒）")]
    public float eatDuration = 5f;

    [Tooltip("吃完后保持冷静的时间（秒）")]
    public float graceDuration = 10f;

    private enum State { Idle, Approaching, Eating, Grace }
    private State state = State.Idle;

    private Transform targetFood;
    private float timer;

    private void Update()
    {
        switch (state)
        {
            case State.Idle: DetectAndReact(); break;
            case State.Approaching: MoveTowardsFood(); break;
            case State.Eating:
                timer -= Time.deltaTime;
                if (timer <= 0f) { state = State.Grace; timer = graceDuration; }
                break;
            case State.Grace:
                timer -= Time.deltaTime;
                if (timer <= 0f) state = State.Idle;
                break;
        }
    }

    private void DetectAndReact()
    {
        foreach (var col in Physics.OverlapSphere(transform.position, detectionRadius))
        {
            var food = col.GetComponent<FoodWorld>();
            if (food == null) continue;                           // 只对 FoodWorld 做反应

            float distToPlayer = Vector3.Distance(transform.position,
                                                  Camera.main.transform.position);

            switch (temperament)
            {
                case Temperament.Neutral: StartApproach(food.transform); break;
                case Temperament.Fearful: if (distToPlayer > safeDistance) StartApproach(food.transform); break;
                case Temperament.Hostile: if (distToPlayer <= safeDistance) StartApproach(food.transform); break;
            }
            // 找到一个即可
            if (state == State.Approaching) return;
        }
    }

    private void StartApproach(Transform food)
    {
        targetFood = food;
        state = State.Approaching;
    }

    private void MoveTowardsFood()
    {
        if (targetFood == null) { state = State.Idle; return; }

        transform.position = Vector3.MoveTowards(transform.position,
                                                 targetFood.position,
                                                 3f * Time.deltaTime);

        if (Vector3.Distance(transform.position, targetFood.position) < 1f)
        {
            state = State.Eating;
            timer = eatDuration;
            Destroy(targetFood.gameObject);
            targetFood = null;
        }
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, detectionRadius);
    }
}

/// <summary>动物性格枚举</summary>
public enum Temperament { Neutral, Fearful, Hostile }
