// Assets/Scripts/System/ConsumableManager.cs
using UnityEngine;
using System;

public class ConsumableManager : MonoBehaviour
{
    /* ────────── 单例 ────────── */
    public static ConsumableManager Instance { get; private set; }

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);   // 全局常驻
        }
        else
        {
            Destroy(gameObject);
        }
    }

    /* ────────── Inspector 参数 ────────── */
    [Header("Film")]
    public int filmCap = 20;
    [SerializeField] int filmStart = 20;

    [Header("Food")]
    public int foodCap = 10;
    [SerializeField] int foodStart = 10;

    /* ────────── 内部状态 ────────── */
    int film;      // 当前胶卷
    int food;      // 当前食物

    /* ────────── 只读属性 ────────── */
    public int Film => film;
    public int Food => food;

    /* ────────── 事件 ────────── */
    public event Action OnConsumableChanged;

    /* ────────── 初始化 ────────── */
    void Start()
    {
        film = Mathf.Clamp(filmStart, 0, filmCap);
        food = Mathf.Clamp(foodStart, 0, foodCap);
        OnConsumableChanged?.Invoke();
    }

    /* ────────── 公共 API ────────── */
    // Film
    public bool UseFilm(int amount = 1)
    {
        if (amount <= 0 || film < amount) return false;
        film -= amount;
        OnConsumableChanged?.Invoke();
        return true;
    }
    public void AddFilm(int amount) { if (amount > 0) film = Mathf.Clamp(film + amount, 0, filmCap); OnConsumableChanged?.Invoke(); }
    public void RefillFilm() { film = filmCap; OnConsumableChanged?.Invoke(); }

    // Food
    public bool UseFood(int amount = 1)
    {
        if (amount <= 0 || food < amount) return false;
        food -= amount;
        OnConsumableChanged?.Invoke();
        return true;
    }
    public void AddFood(int amount) { if (amount > 0) food = Mathf.Clamp(food + amount, 0, foodCap); OnConsumableChanged?.Invoke(); }
    public void RefillFood() { food = foodCap; OnConsumableChanged?.Invoke(); }
}
